#!/usr/bin/bash

set -e

function usage {
    echo "To run the server on port <port> to act as a proxy server for <origin>:"
    echo "$ caching-proxy --port <port> --origin <origin>"
    echo ""
    echo "Example - caching-proxy --port 8080 --origin https://jsonplaceholder.typicode.com"
    echo ""
    echo "To clear the cache of proxy server:"
    echo "$ caching-proxy --clear-cache"
    echo ""
}

function start_redis_server {
    redisPort=$1
    echo "Starting redis on port ${redisPort}..."
    docker compose down
    REDIS_PORT=${redisPort} docker compose up -d
    echo "ðŸ“¦ Redis started on port ${redisPort}"
    mkdir -p .config
    echo "${redisPort}" > .config/redis.port
}

function start_java_application {
    port=$1
    redisPort=$2
    origin=$3
    cacheDurationSeconds=$4

    mkdir -p .config
    echo "${port}" > .config/server.port
    echo ""
    echo "Starting Java Application on port ${port} and origin ${origin}"
    echo ""
    SERVER_PORT=${port} REDIS_HOST=localhost REDIS_PORT=${redisPort} PROXY_UPSTREAM_SERVER_HOST=${origin} CACHE_DURATION_SECONDS=${cacheDurationSeconds} ./gradlew bootRun
    echo ""
    echo "Started Java Application"
}

function start_server {
    port=$1
    origin=$2
    cacheDurationSeconds=$3

    redisPort=6379
    if [ $port = $redisPort ]; then
        redisPort=6380
    fi

    start_redis_server ${redisPort}
    
    start_java_application ${port} ${redisPort} ${origin} ${cacheDurationSeconds}
}

function clear_redis_cache {
    echo "ðŸ§¹ Clearing cache from redis database..."
    docker exec caching-proxy-redis redis-cli FLUSHALL
    echo "âœ… Done"
}

PORT=""
ORIGIN=""
CLEAR_CACHE=0

START_SERVER=0

while [[ $# -gt 0 ]]; do
    case "$1" in
        -p | --port)
            ((START_SERVER=START_SERVER+1))
            PORT="$2"
            shift
            shift
            ;;
        -o | --origin)
            ((START_SERVER=START_SERVER+1))
            ORIGIN="$2"
            shift
            shift
            ;;
        -c | --clear-cache)
            CLEAR_CACHE=1
            shift
            ;;
        -h | --help)
            usage
            exit 0
            ;;
        *)
            usage
            exit 1
            ;;
    esac
done

if [ "${START_SERVER}" = 2 ]; then
    if [ "${CLEAR_CACHE}" = 1 ]; then
        usage
        exit 1
    fi

    start_server ${PORT} ${ORIGIN} 3600

    exit 0
fi

if [ "${CLEAR_CACHE}" = 1 ]; then

    clear_redis_cache

    exit 0
fi

usage
exit 1

